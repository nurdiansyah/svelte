/* test/sourcemaps/samples/binding/input.svelte generated by Svelte vx.xx.x */
import {
	SvelteComponent,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_input_value
} from "svelte/internal";

function create_fragment(ctx) {
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
		},
		m(target, anchor) {
			insert(target, input, anchor);
			set_input_value(input, /*foo*/ ctx[0].bar.baz);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*foo*/ 1 && input.value !== /*foo*/ ctx[0].bar.baz) {
				set_input_value(input, /*foo*/ ctx[0].bar.baz);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { foo } = $$props;

	function input_input_handler() {
		foo.bar.baz = this.value;
		$$invalidate(0, foo);
	}

	$$self.$$set = $$props => {
		if ("foo" in $$props) $$invalidate(0, foo = $$props.foo);
	};

	return [foo, input_input_handler];
}

class Input extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { foo: 0 });
	}
}

export default Input;
//# sourceMappingURL=output.js.map